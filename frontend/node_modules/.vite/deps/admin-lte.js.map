{
  "version": 3,
  "sources": ["../../admin-lte/src/ts/util/index.ts", "../../admin-lte/src/ts/layout.ts", "../../admin-lte/src/ts/card-widget.ts", "../../admin-lte/src/ts/treeview.ts", "../../admin-lte/src/ts/direct-chat.ts", "../../admin-lte/src/ts/fullscreen.ts", "../../admin-lte/src/ts/push-menu.ts", "../../admin-lte/src/ts/accessibility.ts", "../../admin-lte/src/ts/adminlte.ts"],
  "sourcesContent": ["const domContentLoadedCallbacks: Array<() => void> = []\n\nconst onDOMContentLoaded = (callback: () => void): void => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!domContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        for (const callback of domContentLoadedCallbacks) {\n          callback()\n        }\n      })\n    }\n\n    domContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\n/* ES2022 UTILITY FUNCTIONS */\n\n/**\n * Check if an element has a specific data attribute using ES2022 Object.hasOwn()\n */\nconst hasDataAttribute = (element: HTMLElement, attribute: string): boolean => {\n  return Object.hasOwn(element.dataset, attribute)\n}\n\n/**\n * Get the last element from a NodeList using ES2022 Array.at()\n */\nconst getLastElement = <T extends Element>(elements: NodeListOf<T> | T[]): T | undefined => {\n  const elementsArray = Array.from(elements)\n  return elementsArray.at(-1)\n}\n\n/**\n * Safe property access with better error handling\n */\nconst safePropertyAccess = (obj: Record<string, unknown>, property: string): unknown => {\n  try {\n    return Object.hasOwn(obj, property) ? obj[property] : undefined\n  } catch (error) {\n    // ES2022 Error cause\n    throw new Error(`Failed to access property '${property}'`, { cause: error })\n  }\n}\n\n/* SLIDE UP */\nconst slideUp = (target: HTMLElement, duration = 500) => {\n  target.style.transitionProperty = 'height, margin, padding'\n  target.style.transitionDuration = `${duration}ms`\n  target.style.boxSizing = 'border-box'\n  target.style.height = `${target.offsetHeight}px`\n  target.style.overflow = 'hidden'\n\n  globalThis.setTimeout(() => {\n    target.style.height = '0'\n    target.style.paddingTop = '0'\n    target.style.paddingBottom = '0'\n    target.style.marginTop = '0'\n    target.style.marginBottom = '0'\n  }, 1)\n\n  globalThis.setTimeout(() => {\n    target.style.display = 'none'\n    target.style.removeProperty('height')\n    target.style.removeProperty('padding-top')\n    target.style.removeProperty('padding-bottom')\n    target.style.removeProperty('margin-top')\n    target.style.removeProperty('margin-bottom')\n    target.style.removeProperty('overflow')\n    target.style.removeProperty('transition-duration')\n    target.style.removeProperty('transition-property')\n  }, duration)\n}\n\n/* SLIDE DOWN */\nconst slideDown = (target: HTMLElement, duration = 500) => {\n  target.style.removeProperty('display')\n  let { display } = globalThis.getComputedStyle(target)\n\n  if (display === 'none') {\n    display = 'block'\n  }\n\n  target.style.display = display\n  const height = target.offsetHeight\n  target.style.overflow = 'hidden'\n  target.style.height = '0'\n  target.style.paddingTop = '0'\n  target.style.paddingBottom = '0'\n  target.style.marginTop = '0'\n  target.style.marginBottom = '0'\n\n  globalThis.setTimeout(() => {\n    target.style.boxSizing = 'border-box'\n    target.style.transitionProperty = 'height, margin, padding'\n    target.style.transitionDuration = `${duration}ms`\n    target.style.height = `${height}px`\n    target.style.removeProperty('padding-top')\n    target.style.removeProperty('padding-bottom')\n    target.style.removeProperty('margin-top')\n    target.style.removeProperty('margin-bottom')\n  }, 1)\n\n  globalThis.setTimeout(() => {\n    target.style.removeProperty('height')\n    target.style.removeProperty('overflow')\n    target.style.removeProperty('transition-duration')\n    target.style.removeProperty('transition-property')\n  }, duration)\n}\n\n/* TOGGLE */\nconst slideToggle = (target: HTMLElement, duration = 500) => {\n  if (globalThis.getComputedStyle(target).display === 'none') {\n    slideDown(target, duration)\n    return\n  }\n\n  slideUp(target, duration)\n}\n\nexport {\n  onDOMContentLoaded,\n  slideUp,\n  slideDown,\n  slideToggle,\n  hasDataAttribute,\n  getLastElement,\n  safePropertyAccess\n}\n", "/**\n * --------------------------------------------\n * @file AdminLTE layout.ts\n * @description Layout for AdminLTE.\n * @license MIT\n * --------------------------------------------\n */\n\nimport {\n  onDOMContentLoaded\n} from './util/index'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst CLASS_NAME_HOLD_TRANSITIONS = 'hold-transition'\nconst CLASS_NAME_APP_LOADED = 'app-loaded'\n\n/**\n * Class Definition\n * ====================================================\n */\n\nclass Layout {\n  _element: HTMLElement\n\n  constructor(element: HTMLElement) {\n    this._element = element\n  }\n\n  holdTransition(): void {\n    let resizeTimer: ReturnType<typeof setTimeout>\n    window.addEventListener('resize', () => {\n      document.body.classList.add(CLASS_NAME_HOLD_TRANSITIONS)\n      clearTimeout(resizeTimer)\n      resizeTimer = setTimeout(() => {\n        document.body.classList.remove(CLASS_NAME_HOLD_TRANSITIONS)\n      }, 400)\n    })\n  }\n}\n\nonDOMContentLoaded(() => {\n  const data = new Layout(document.body)\n  data.holdTransition()\n  setTimeout(() => {\n    document.body.classList.add(CLASS_NAME_APP_LOADED)\n  }, 400)\n})\n\nexport default Layout\n", "/**\n * --------------------------------------------\n * @file AdminLTE card-widget.ts\n * @description Card widget for AdminLTE.\n * @license MIT\n * --------------------------------------------\n */\n\nimport {\n  onDOMContentLoaded,\n  slideUp,\n  slideDown\n} from './util/index'\n\n/**\n * Constants\n * ====================================================\n */\n\nconst DATA_KEY = 'lte.card-widget'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_COLLAPSED = `collapsed${EVENT_KEY}`\nconst EVENT_EXPANDED = `expanded${EVENT_KEY}`\nconst EVENT_REMOVE = `remove${EVENT_KEY}`\nconst EVENT_MAXIMIZED = `maximized${EVENT_KEY}`\nconst EVENT_MINIMIZED = `minimized${EVENT_KEY}`\n\nconst CLASS_NAME_CARD = 'card'\nconst CLASS_NAME_COLLAPSED = 'collapsed-card'\nconst CLASS_NAME_COLLAPSING = 'collapsing-card'\nconst CLASS_NAME_EXPANDING = 'expanding-card'\nconst CLASS_NAME_WAS_COLLAPSED = 'was-collapsed'\nconst CLASS_NAME_MAXIMIZED = 'maximized-card'\n\nconst SELECTOR_DATA_REMOVE = '[data-lte-toggle=\"card-remove\"]'\nconst SELECTOR_DATA_COLLAPSE = '[data-lte-toggle=\"card-collapse\"]'\nconst SELECTOR_DATA_MAXIMIZE = '[data-lte-toggle=\"card-maximize\"]'\nconst SELECTOR_CARD = `.${CLASS_NAME_CARD}`\nconst SELECTOR_CARD_BODY = '.card-body'\nconst SELECTOR_CARD_FOOTER = '.card-footer'\n\ntype Config = {\n  animationSpeed: number;\n  collapseTrigger: string;\n  removeTrigger: string;\n  maximizeTrigger: string;\n}\n\nconst Default: Config = {\n  animationSpeed: 500,\n  collapseTrigger: SELECTOR_DATA_COLLAPSE,\n  removeTrigger: SELECTOR_DATA_REMOVE,\n  maximizeTrigger: SELECTOR_DATA_MAXIMIZE\n}\n\nclass CardWidget {\n  _element: HTMLElement\n  _parent: HTMLElement | undefined\n  _clone: HTMLElement | undefined\n  _config: Config\n\n  constructor(element: HTMLElement, config: Config) {\n    this._element = element\n    this._parent = element.closest(SELECTOR_CARD) as HTMLElement | undefined\n\n    if (element.classList.contains(CLASS_NAME_CARD)) {\n      this._parent = element\n    }\n\n    this._config = { ...Default, ...config }\n  }\n\n  collapse() {\n    const event = new Event(EVENT_COLLAPSED)\n\n    if (this._parent) {\n      this._parent.classList.add(CLASS_NAME_COLLAPSING)\n\n      const elm = this._parent?.querySelectorAll(`${SELECTOR_CARD_BODY}, ${SELECTOR_CARD_FOOTER}`)\n\n      elm.forEach(el => {\n        if (el instanceof HTMLElement) {\n          slideUp(el, this._config.animationSpeed)\n        }\n      })\n\n      setTimeout(() => {\n        if (this._parent) {\n          this._parent.classList.add(CLASS_NAME_COLLAPSED)\n          this._parent.classList.remove(CLASS_NAME_COLLAPSING)\n        }\n      }, this._config.animationSpeed)\n    }\n\n    this._element?.dispatchEvent(event)\n  }\n\n  expand() {\n    const event = new Event(EVENT_EXPANDED)\n\n    if (this._parent) {\n      this._parent.classList.add(CLASS_NAME_EXPANDING)\n\n      const elm = this._parent?.querySelectorAll(`${SELECTOR_CARD_BODY}, ${SELECTOR_CARD_FOOTER}`)\n\n      elm.forEach(el => {\n        if (el instanceof HTMLElement) {\n          slideDown(el, this._config.animationSpeed)\n        }\n      })\n\n      setTimeout(() => {\n        if (this._parent) {\n          this._parent.classList.remove(CLASS_NAME_COLLAPSED, CLASS_NAME_EXPANDING)\n        }\n      }, this._config.animationSpeed)\n    }\n\n    this._element?.dispatchEvent(event)\n  }\n\n  remove() {\n    const event = new Event(EVENT_REMOVE)\n\n    if (this._parent) {\n      slideUp(this._parent, this._config.animationSpeed)\n    }\n\n    this._element?.dispatchEvent(event)\n  }\n\n  toggle() {\n    if (this._parent?.classList.contains(CLASS_NAME_COLLAPSED)) {\n      this.expand()\n      return\n    }\n\n    this.collapse()\n  }\n\n  maximize() {\n    const event = new Event(EVENT_MAXIMIZED)\n\n    if (this._parent) {\n      this._parent.style.height = `${this._parent.offsetHeight}px`\n      this._parent.style.width = `${this._parent.offsetWidth}px`\n      this._parent.style.transition = 'all .15s'\n\n      setTimeout(() => {\n        const htmlTag = document.querySelector('html')\n\n        if (htmlTag) {\n          htmlTag.classList.add(CLASS_NAME_MAXIMIZED)\n        }\n\n        if (this._parent) {\n          this._parent.classList.add(CLASS_NAME_MAXIMIZED)\n\n          if (this._parent.classList.contains(CLASS_NAME_COLLAPSED)) {\n            this._parent.classList.add(CLASS_NAME_WAS_COLLAPSED)\n          }\n        }\n      }, 150)\n    }\n\n    this._element?.dispatchEvent(event)\n  }\n\n  minimize() {\n    const event = new Event(EVENT_MINIMIZED)\n\n    if (this._parent) {\n      this._parent.style.height = 'auto'\n      this._parent.style.width = 'auto'\n      this._parent.style.transition = 'all .15s'\n\n      setTimeout(() => {\n        const htmlTag = document.querySelector('html')\n\n        if (htmlTag) {\n          htmlTag.classList.remove(CLASS_NAME_MAXIMIZED)\n        }\n\n        if (this._parent) {\n          this._parent.classList.remove(CLASS_NAME_MAXIMIZED)\n\n          if (this._parent?.classList.contains(CLASS_NAME_WAS_COLLAPSED)) {\n            this._parent.classList.remove(CLASS_NAME_WAS_COLLAPSED)\n          }\n        }\n      }, 10)\n    }\n\n    this._element?.dispatchEvent(event)\n  }\n\n  toggleMaximize() {\n    if (this._parent?.classList.contains(CLASS_NAME_MAXIMIZED)) {\n      this.minimize()\n      return\n    }\n\n    this.maximize()\n  }\n}\n\n/**\n *\n * Data Api implementation\n * ====================================================\n */\n\nonDOMContentLoaded(() => {\n  const collapseBtn = document.querySelectorAll(SELECTOR_DATA_COLLAPSE)\n\n  collapseBtn.forEach(btn => {\n    btn.addEventListener('click', event => {\n      event.preventDefault()\n      const target = event.target as HTMLElement\n      const data = new CardWidget(target, Default)\n      data.toggle()\n    })\n  })\n\n  const removeBtn = document.querySelectorAll(SELECTOR_DATA_REMOVE)\n\n  removeBtn.forEach(btn => {\n    btn.addEventListener('click', event => {\n      event.preventDefault()\n      const target = event.target as HTMLElement\n      const data = new CardWidget(target, Default)\n      data.remove()\n    })\n  })\n\n  const maxBtn = document.querySelectorAll(SELECTOR_DATA_MAXIMIZE)\n\n  maxBtn.forEach(btn => {\n    btn.addEventListener('click', event => {\n      event.preventDefault()\n      const target = event.target as HTMLElement\n      const data = new CardWidget(target, Default)\n      data.toggleMaximize()\n    })\n  })\n})\n\nexport default CardWidget\n", "/**\n * --------------------------------------------\n * @file AdminLTE treeview.ts\n * @description Treeview plugin for AdminLTE.\n * @license MIT\n * --------------------------------------------\n */\n\nimport {\n  onDOMContentLoaded,\n  slideDown,\n  slideUp\n} from './util/index'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\n// const NAME = 'Treeview'\nconst DATA_KEY = 'lte.treeview'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_EXPANDED = `expanded${EVENT_KEY}`\nconst EVENT_COLLAPSED = `collapsed${EVENT_KEY}`\n// const EVENT_LOAD_DATA_API = `load${EVENT_KEY}`\n\nconst CLASS_NAME_MENU_OPEN = 'menu-open'\nconst SELECTOR_NAV_ITEM = '.nav-item'\nconst SELECTOR_NAV_LINK = '.nav-link'\nconst SELECTOR_TREEVIEW_MENU = '.nav-treeview'\nconst SELECTOR_DATA_TOGGLE = '[data-lte-toggle=\"treeview\"]'\n\nconst Default = {\n  animationSpeed: 300,\n  accordion: true\n}\n\ntype Config = {\n  animationSpeed: number;\n  accordion: boolean;\n}\n\n/**\n * Class Definition\n * ====================================================\n */\n\nclass Treeview {\n  _element: HTMLElement\n  _config: Config\n\n  constructor(element: HTMLElement, config: Config) {\n    this._element = element\n    this._config = { ...Default, ...config }\n  }\n\n  open(): void {\n    const event = new Event(EVENT_EXPANDED)\n\n    if (this._config.accordion) {\n      const openMenuList = this._element.parentElement?.querySelectorAll(`${SELECTOR_NAV_ITEM}.${CLASS_NAME_MENU_OPEN}`)\n\n      openMenuList?.forEach(openMenu => {\n        if (openMenu !== this._element.parentElement) {\n          openMenu.classList.remove(CLASS_NAME_MENU_OPEN)\n          const childElement = openMenu?.querySelector(SELECTOR_TREEVIEW_MENU) as HTMLElement | undefined\n          if (childElement) {\n            slideUp(childElement, this._config.animationSpeed)\n          }\n        }\n      })\n    }\n\n    this._element.classList.add(CLASS_NAME_MENU_OPEN)\n\n    const childElement = this._element?.querySelector(SELECTOR_TREEVIEW_MENU) as HTMLElement | undefined\n    if (childElement) {\n      slideDown(childElement, this._config.animationSpeed)\n    }\n\n    this._element.dispatchEvent(event)\n  }\n\n  close(): void {\n    const event = new Event(EVENT_COLLAPSED)\n\n    this._element.classList.remove(CLASS_NAME_MENU_OPEN)\n\n    const childElement = this._element?.querySelector(SELECTOR_TREEVIEW_MENU) as HTMLElement | undefined\n    if (childElement) {\n      slideUp(childElement, this._config.animationSpeed)\n    }\n\n    this._element.dispatchEvent(event)\n  }\n\n  toggle(): void {\n    if (this._element.classList.contains(CLASS_NAME_MENU_OPEN)) {\n      this.close()\n    } else {\n      this.open()\n    }\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\nonDOMContentLoaded(() => {\n  const button = document.querySelectorAll(SELECTOR_DATA_TOGGLE)\n\n  button.forEach(btn => {\n    btn.addEventListener('click', event => {\n      const target = event.target as HTMLElement\n      const targetItem = target.closest(SELECTOR_NAV_ITEM) as HTMLElement | undefined\n      const targetLink = target.closest(SELECTOR_NAV_LINK) as HTMLAnchorElement | undefined\n      const lteToggleElement = event.currentTarget as HTMLElement\n\n      if (target?.getAttribute('href') === '#' || targetLink?.getAttribute('href') === '#') {\n        event.preventDefault()\n      }\n\n      if (targetItem) {\n        // Read data attributes\n        const accordionAttr = lteToggleElement.dataset.accordion\n        const animationSpeedAttr = lteToggleElement.dataset.animationSpeed\n\n        // Build config from data attributes, fallback to Default\n        const config: Config = {\n          accordion: accordionAttr === undefined ? Default.accordion : accordionAttr === 'true',\n          animationSpeed: animationSpeedAttr === undefined ? Default.animationSpeed : Number(animationSpeedAttr)\n        }\n\n        const data = new Treeview(targetItem, config)\n        data.toggle()\n      }\n    })\n  })\n})\n\nexport default Treeview", "/**\n * --------------------------------------------\n * @file AdminLTE direct-chat.ts\n * @description Direct chat for AdminLTE.\n * @license MIT\n * --------------------------------------------\n */\n\nimport {\n  onDOMContentLoaded\n} from './util/index'\n\n/**\n * Constants\n * ====================================================\n */\n\nconst DATA_KEY = 'lte.direct-chat'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_EXPANDED = `expanded${EVENT_KEY}`\nconst EVENT_COLLAPSED = `collapsed${EVENT_KEY}`\n\nconst SELECTOR_DATA_TOGGLE = '[data-lte-toggle=\"chat-pane\"]'\nconst SELECTOR_DIRECT_CHAT = '.direct-chat'\n\nconst CLASS_NAME_DIRECT_CHAT_OPEN = 'direct-chat-contacts-open'\n\n/**\n * Class Definition\n * ====================================================\n */\n\nclass DirectChat {\n  _element: HTMLElement\n  constructor(element: HTMLElement) {\n    this._element = element\n  }\n\n  toggle(): void {\n    if (this._element.classList.contains(CLASS_NAME_DIRECT_CHAT_OPEN)) {\n      const event = new Event(EVENT_COLLAPSED)\n\n      this._element.classList.remove(CLASS_NAME_DIRECT_CHAT_OPEN)\n\n      this._element.dispatchEvent(event)\n    } else {\n      const event = new Event(EVENT_EXPANDED)\n\n      this._element.classList.add(CLASS_NAME_DIRECT_CHAT_OPEN)\n\n      this._element.dispatchEvent(event)\n    }\n  }\n}\n\n/**\n *\n * Data Api implementation\n * ====================================================\n */\n\nonDOMContentLoaded(() => {\n  const button = document.querySelectorAll(SELECTOR_DATA_TOGGLE)\n\n  button.forEach(btn => {\n    btn.addEventListener('click', event => {\n      event.preventDefault()\n      const target = event.target as HTMLElement\n      const chatPane = target.closest(SELECTOR_DIRECT_CHAT) as HTMLElement | undefined\n\n      if (chatPane) {\n        const data = new DirectChat(chatPane)\n        data.toggle()\n      }\n    })\n  })\n})\n\nexport default DirectChat\n", "/**\n * --------------------------------------------\n * @file AdminLTE fullscreen.ts\n * @description Fullscreen plugin for AdminLTE.\n * @license MIT\n * --------------------------------------------\n */\n\nimport {\n  onDOMContentLoaded\n} from './util/index'\n\n/**\n * Constants\n * ============================================================================\n */\nconst DATA_KEY = 'lte.fullscreen'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_MAXIMIZED = `maximized${EVENT_KEY}`\nconst EVENT_MINIMIZED = `minimized${EVENT_KEY}`\n\nconst SELECTOR_FULLSCREEN_TOGGLE = '[data-lte-toggle=\"fullscreen\"]'\nconst SELECTOR_MAXIMIZE_ICON = '[data-lte-icon=\"maximize\"]'\nconst SELECTOR_MINIMIZE_ICON = '[data-lte-icon=\"minimize\"]'\n\n/**\n * Class Definition.\n * ============================================================================\n */\nclass FullScreen {\n  _element: HTMLElement\n  _config: undefined\n\n  constructor(element: HTMLElement, config?: undefined) {\n    this._element = element\n    this._config = config\n  }\n\n  inFullScreen(): void {\n    const event = new Event(EVENT_MAXIMIZED)\n\n    const iconMaximize = document.querySelector<HTMLElement>(SELECTOR_MAXIMIZE_ICON)\n    const iconMinimize = document.querySelector<HTMLElement>(SELECTOR_MINIMIZE_ICON)\n\n    void document.documentElement.requestFullscreen()\n\n    if (iconMaximize) {\n      iconMaximize.style.display = 'none'\n    }\n\n    if (iconMinimize) {\n      iconMinimize.style.display = 'block'\n    }\n\n    this._element.dispatchEvent(event)\n  }\n\n  outFullscreen(): void {\n    const event = new Event(EVENT_MINIMIZED)\n\n    const iconMaximize = document.querySelector<HTMLElement>(SELECTOR_MAXIMIZE_ICON)\n    const iconMinimize = document.querySelector<HTMLElement>(SELECTOR_MINIMIZE_ICON)\n\n    void document.exitFullscreen()\n\n    if (iconMaximize) {\n      iconMaximize.style.display = 'block'\n    }\n\n    if (iconMinimize) {\n      iconMinimize.style.display = 'none'\n    }\n\n    this._element.dispatchEvent(event)\n  }\n\n  toggleFullScreen(): void {\n    if (document.fullscreenEnabled) {\n      if (document.fullscreenElement) {\n        this.outFullscreen()\n      } else {\n        this.inFullScreen()\n      }\n    }\n  }\n}\n\n/**\n * Data Api implementation\n * ============================================================================\n */\nonDOMContentLoaded(() => {\n  const buttons = document.querySelectorAll(SELECTOR_FULLSCREEN_TOGGLE)\n\n  buttons.forEach(btn => {\n    btn.addEventListener('click', event => {\n      event.preventDefault()\n\n      const target = event.target as HTMLElement\n      const button = target.closest(SELECTOR_FULLSCREEN_TOGGLE) as HTMLElement | undefined\n\n      if (button) {\n        const data = new FullScreen(button, undefined)\n        data.toggleFullScreen()\n      }\n    })\n  })\n})\n\nexport default FullScreen\n", "/**\n * --------------------------------------------\n * @file AdminLTE push-menu.ts\n * @description Push menu for AdminLTE.\n * @license MIT\n * --------------------------------------------\n */\n\nimport {\n  onDOMContentLoaded\n} from './util/index'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst DATA_KEY = 'lte.push-menu'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_OPEN = `open${EVENT_KEY}`\nconst EVENT_COLLAPSE = `collapse${EVENT_KEY}`\n\nconst CLASS_NAME_SIDEBAR_MINI = 'sidebar-mini'\nconst CLASS_NAME_SIDEBAR_COLLAPSE = 'sidebar-collapse'\nconst CLASS_NAME_SIDEBAR_OPEN = 'sidebar-open'\nconst CLASS_NAME_SIDEBAR_EXPAND = 'sidebar-expand'\nconst CLASS_NAME_SIDEBAR_OVERLAY = 'sidebar-overlay'\nconst CLASS_NAME_MENU_OPEN = 'menu-open'\n\nconst SELECTOR_APP_SIDEBAR = '.app-sidebar'\nconst SELECTOR_SIDEBAR_MENU = '.sidebar-menu'\nconst SELECTOR_NAV_ITEM = '.nav-item'\nconst SELECTOR_NAV_TREEVIEW = '.nav-treeview'\nconst SELECTOR_APP_WRAPPER = '.app-wrapper'\nconst SELECTOR_SIDEBAR_EXPAND = `[class*=\"${CLASS_NAME_SIDEBAR_EXPAND}\"]`\nconst SELECTOR_SIDEBAR_TOGGLE = '[data-lte-toggle=\"sidebar\"]'\n\ntype Config = {\n  sidebarBreakpoint: number;\n}\n\nconst Defaults = {\n  sidebarBreakpoint: 992\n}\n\n/**\n * Class Definition\n * ====================================================\n */\n\nclass PushMenu {\n  _element: HTMLElement\n  _config: Config\n\n  constructor(element: HTMLElement, config: Config) {\n    this._element = element\n    this._config = { ...Defaults, ...config }\n  }\n\n  menusClose() {\n    const navTreeview = document.querySelectorAll<HTMLElement>(SELECTOR_NAV_TREEVIEW)\n\n    navTreeview.forEach(navTree => {\n      navTree.style.removeProperty('display')\n      navTree.style.removeProperty('height')\n    })\n\n    const navSidebar = document.querySelector(SELECTOR_SIDEBAR_MENU)\n    const navItem = navSidebar?.querySelectorAll(SELECTOR_NAV_ITEM)\n\n    if (navItem) {\n      navItem.forEach(navI => {\n        navI.classList.remove(CLASS_NAME_MENU_OPEN)\n      })\n    }\n  }\n\n  expand() {\n    const event = new Event(EVENT_OPEN)\n\n    document.body.classList.remove(CLASS_NAME_SIDEBAR_COLLAPSE)\n    document.body.classList.add(CLASS_NAME_SIDEBAR_OPEN)\n\n    this._element.dispatchEvent(event)\n  }\n\n  collapse() {\n    const event = new Event(EVENT_COLLAPSE)\n\n    document.body.classList.remove(CLASS_NAME_SIDEBAR_OPEN)\n    document.body.classList.add(CLASS_NAME_SIDEBAR_COLLAPSE)\n\n    this._element.dispatchEvent(event)\n  }\n\n  addSidebarBreakPoint() {\n    const sidebarExpandList = document.querySelector(SELECTOR_SIDEBAR_EXPAND)?.classList ?? []\n    const sidebarExpand = Array.from(sidebarExpandList).find(className => className.startsWith(CLASS_NAME_SIDEBAR_EXPAND)) ?? ''\n    const sidebar = document.getElementsByClassName(sidebarExpand)[0]\n    const sidebarContent = globalThis.getComputedStyle(sidebar, '::before').getPropertyValue('content')\n    this._config = { ...this._config, sidebarBreakpoint: Number(sidebarContent.replace(/[^\\d.-]/g, '')) }\n\n    if (window.innerWidth <= this._config.sidebarBreakpoint) {\n      this.collapse()\n    } else {\n      if (!document.body.classList.contains(CLASS_NAME_SIDEBAR_MINI)) {\n        this.expand()\n      }\n\n      if (document.body.classList.contains(CLASS_NAME_SIDEBAR_MINI) && document.body.classList.contains(CLASS_NAME_SIDEBAR_COLLAPSE)) {\n        this.collapse()\n      }\n    }\n  }\n\n  toggle() {\n    if (document.body.classList.contains(CLASS_NAME_SIDEBAR_COLLAPSE)) {\n      this.expand()\n    } else {\n      this.collapse()\n    }\n  }\n\n  init() {\n    this.addSidebarBreakPoint()\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\nonDOMContentLoaded(() => {\n  const sidebar = document?.querySelector(SELECTOR_APP_SIDEBAR) as HTMLElement | undefined\n\n  if (sidebar) {\n    const data = new PushMenu(sidebar, Defaults)\n    data.init()\n\n    window.addEventListener('resize', () => {\n      data.init()\n    })\n  }\n\n  const sidebarOverlay = document.createElement('div')\n  sidebarOverlay.className = CLASS_NAME_SIDEBAR_OVERLAY\n  document.querySelector(SELECTOR_APP_WRAPPER)?.append(sidebarOverlay)\n\n  sidebarOverlay.addEventListener('touchstart', event => {\n    event.preventDefault()\n    const target = event.currentTarget as HTMLElement\n    const data = new PushMenu(target, Defaults)\n    data.collapse()\n  }, { passive: true })\n  sidebarOverlay.addEventListener('click', event => {\n    event.preventDefault()\n    const target = event.currentTarget as HTMLElement\n    const data = new PushMenu(target, Defaults)\n    data.collapse()\n  })\n\n  const fullBtn = document.querySelectorAll(SELECTOR_SIDEBAR_TOGGLE)\n\n  fullBtn.forEach(btn => {\n    btn.addEventListener('click', event => {\n      event.preventDefault()\n\n      let button = event.currentTarget as HTMLElement | undefined\n\n      if (button?.dataset.lteToggle !== 'sidebar') {\n        button = button?.closest(SELECTOR_SIDEBAR_TOGGLE) as HTMLElement | undefined\n      }\n\n      if (button) {\n        event?.preventDefault()\n        const data = new PushMenu(button, Defaults)\n        data.toggle()\n      }\n    })\n  })\n})\n\nexport default PushMenu\n", "/**\n * AdminLTE Accessibility Module\n * WCAG 2.1 AA Compliance Features\n */\n\nexport interface AccessibilityConfig {\n  announcements: boolean\n  skipLinks: boolean\n  focusManagement: boolean\n  keyboardNavigation: boolean\n  reducedMotion: boolean\n}\n\nexport class AccessibilityManager {\n  private config: AccessibilityConfig\n  private liveRegion: HTMLElement | null = null\n  private focusHistory: HTMLElement[] = []\n\n  constructor(config: Partial<AccessibilityConfig> = {}) {\n    this.config = {\n      announcements: true,\n      skipLinks: true,\n      focusManagement: true,\n      keyboardNavigation: true,\n      reducedMotion: true,\n      ...config\n    }\n\n    this.init()\n  }\n\n  private init(): void {\n    if (this.config.announcements) {\n      this.createLiveRegion()\n    }\n\n    if (this.config.skipLinks) {\n      this.addSkipLinks()\n    }\n\n    if (this.config.focusManagement) {\n      this.initFocusManagement()\n    }\n\n    if (this.config.keyboardNavigation) {\n      this.initKeyboardNavigation()\n    }\n\n    if (this.config.reducedMotion) {\n      this.respectReducedMotion()\n    }\n\n    this.initErrorAnnouncements()\n    this.initTableAccessibility()\n    this.initFormAccessibility()\n  }\n\n  // WCAG 4.1.3: Status Messages\n  private createLiveRegion(): void {\n    if (this.liveRegion) return\n\n    this.liveRegion = document.createElement('div')\n    this.liveRegion.id = 'live-region'\n    this.liveRegion.className = 'live-region'\n    this.liveRegion.setAttribute('aria-live', 'polite')\n    this.liveRegion.setAttribute('aria-atomic', 'true')\n    this.liveRegion.setAttribute('role', 'status')\n    \n    document.body.append(this.liveRegion)\n  }\n\n  // WCAG 2.4.1: Bypass Blocks\n  private addSkipLinks(): void {\n    const skipLinksContainer = document.createElement('div')\n    skipLinksContainer.className = 'skip-links'\n    \n    const skipToMain = document.createElement('a')\n    skipToMain.href = '#main'\n    skipToMain.className = 'skip-link'\n    skipToMain.textContent = 'Skip to main content'\n    \n    const skipToNav = document.createElement('a')\n    skipToNav.href = '#navigation'\n    skipToNav.className = 'skip-link'\n    skipToNav.textContent = 'Skip to navigation'\n\n    skipLinksContainer.append(skipToMain)\n    skipLinksContainer.append(skipToNav)\n    \n    document.body.insertBefore(skipLinksContainer, document.body.firstChild)\n\n    // Ensure targets exist and are focusable\n    this.ensureSkipTargets()\n  }\n\n  private ensureSkipTargets(): void {\n    const main = document.querySelector('#main, main, [role=\"main\"]')\n    if (main && !main.id) {\n      main.id = 'main'\n    }\n    if (main && !main.hasAttribute('tabindex')) {\n      main.setAttribute('tabindex', '-1')\n    }\n\n    const nav = document.querySelector('#navigation, nav, [role=\"navigation\"]')\n    if (nav && !nav.id) {\n      nav.id = 'navigation'\n    }\n    if (nav && !nav.hasAttribute('tabindex')) {\n      nav.setAttribute('tabindex', '-1')\n    }\n  }\n\n  // WCAG 2.4.3: Focus Order & 2.4.7: Focus Visible\n  private initFocusManagement(): void {\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'Tab') {\n        this.handleTabNavigation(event)\n      }\n      if (event.key === 'Escape') {\n        this.handleEscapeKey(event)\n      }\n    })\n\n    // Focus management for modals and dropdowns\n    this.initModalFocusManagement()\n    this.initDropdownFocusManagement()\n  }\n\n  private handleTabNavigation(event: KeyboardEvent): void {\n    const focusableElements = this.getFocusableElements()\n    const currentIndex = focusableElements.indexOf(document.activeElement as HTMLElement)\n    \n    if (event.shiftKey) {\n      // Shift+Tab (backward)\n      if (currentIndex <= 0) {\n        event.preventDefault()\n        focusableElements.at(-1)?.focus()\n      }\n    } else if (currentIndex >= focusableElements.length - 1) {\n      // Tab (forward)\n      event.preventDefault()\n      focusableElements[0]?.focus()\n    }\n  }\n\n  private getFocusableElements(): HTMLElement[] {\n    const selector = [\n      'a[href]',\n      'button:not([disabled])',\n      'input:not([disabled])',\n      'select:not([disabled])',\n      'textarea:not([disabled])',\n      '[tabindex]:not([tabindex=\"-1\"])',\n      '[contenteditable=\"true\"]'\n    ].join(', ')\n\n    return Array.from(document.querySelectorAll(selector)) as HTMLElement[]\n  }\n\n  private handleEscapeKey(event: KeyboardEvent): void {\n    // Close modals, dropdowns, etc.\n    const activeModal = document.querySelector('.modal.show')\n    const activeDropdown = document.querySelector('.dropdown-menu.show')\n    \n    if (activeModal) {\n      const closeButton = activeModal.querySelector('[data-bs-dismiss=\"modal\"]') as HTMLElement\n      closeButton?.click()\n      event.preventDefault()\n    } else if (activeDropdown) {\n      const toggleButton = document.querySelector('[data-bs-toggle=\"dropdown\"][aria-expanded=\"true\"]') as HTMLElement\n      toggleButton?.click()\n      event.preventDefault()\n    }\n  }\n\n  // WCAG 2.1.1: Keyboard Access\n  private initKeyboardNavigation(): void {\n    // Add keyboard support for custom components\n    document.addEventListener('keydown', (event) => {\n      const target = event.target as HTMLElement\n      \n      // Handle arrow key navigation for menus\n      if (target.closest('.nav, .navbar-nav, .dropdown-menu')) {\n        this.handleMenuNavigation(event)\n      }\n      \n      // Handle Enter and Space for custom buttons\n      if ((event.key === 'Enter' || event.key === ' ') && target.hasAttribute('role') && target.getAttribute('role') === 'button' && !target.matches('button, input[type=\"button\"], input[type=\"submit\"]')) {\n        event.preventDefault()\n        target.click()\n      }\n    })\n  }\n\n  private handleMenuNavigation(event: KeyboardEvent): void {\n    if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(event.key)) {\n      return\n    }\n\n    const currentElement = event.target as HTMLElement\n    const menuItems = Array.from(currentElement.closest('.nav, .navbar-nav, .dropdown-menu')?.querySelectorAll('a, button') || []) as HTMLElement[]\n    const currentIndex = menuItems.indexOf(currentElement)\n    \n    let nextIndex: number\n    \n    switch (event.key) {\n      case 'ArrowDown':\n      case 'ArrowRight': {\n        nextIndex = currentIndex < menuItems.length - 1 ? currentIndex + 1 : 0\n        break\n      }\n      case 'ArrowUp':\n      case 'ArrowLeft': {\n        nextIndex = currentIndex > 0 ? currentIndex - 1 : menuItems.length - 1\n        break\n      }\n      case 'Home': {\n        nextIndex = 0\n        break\n      }\n      case 'End': {\n        nextIndex = menuItems.length - 1\n        break\n      }\n      default: {\n        return\n      }\n    }\n    \n    event.preventDefault()\n    menuItems[nextIndex]?.focus()\n  }\n\n  // WCAG 2.3.3: Animation from Interactions\n  private respectReducedMotion(): void {\n    const prefersReducedMotion = globalThis.matchMedia('(prefers-reduced-motion: reduce)').matches\n    \n    if (prefersReducedMotion) {\n      document.body.classList.add('reduce-motion')\n      \n      // Disable smooth scrolling\n      document.documentElement.style.scrollBehavior = 'auto'\n      \n      // Reduce animation duration\n      const style = document.createElement('style')\n      style.textContent = `\n        *, *::before, *::after {\n          animation-duration: 0.01ms !important;\n          animation-iteration-count: 1 !important;\n          transition-duration: 0.01ms !important;\n        }\n      `\n      document.head.append(style)\n    }\n  }\n\n  // WCAG 3.3.1: Error Identification\n  private initErrorAnnouncements(): void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as Element\n            \n            // Check for error messages\n            if (element.matches('.alert-danger, .invalid-feedback, .error')) {\n              this.announce(element.textContent || 'Error occurred', 'assertive')\n            }\n            \n            // Check for success messages\n            if (element.matches('.alert-success, .success')) {\n              this.announce(element.textContent || 'Success', 'polite')\n            }\n          }\n        })\n      })\n    })\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    })\n  }\n\n  // WCAG 1.3.1: Info and Relationships\n  private initTableAccessibility(): void {\n    document.querySelectorAll('table').forEach((table) => {\n      // Add table role if missing\n      if (!table.hasAttribute('role')) {\n        table.setAttribute('role', 'table')\n      }\n\n      // Ensure headers have proper scope\n      table.querySelectorAll('th').forEach((th) => {\n        if (!th.hasAttribute('scope')) {\n          const isInThead = th.closest('thead')\n          const isFirstColumn = th.cellIndex === 0\n          \n          if (isInThead) {\n            th.setAttribute('scope', 'col')\n          } else if (isFirstColumn) {\n            th.setAttribute('scope', 'row')\n          }\n        }\n      })\n\n      // Add caption if missing but title exists\n      if (!table.querySelector('caption') && table.hasAttribute('title')) {\n        const caption = document.createElement('caption')\n        caption.textContent = table.getAttribute('title') || ''\n        table.insertBefore(caption, table.firstChild)\n      }\n    })\n  }\n\n  // WCAG 3.3.2: Labels or Instructions\n  private initFormAccessibility(): void {\n    document.querySelectorAll('input, select, textarea').forEach((input) => {\n      const htmlInput = input as HTMLInputElement\n      \n      // Ensure all inputs have labels\n      if (!htmlInput.labels?.length && !htmlInput.hasAttribute('aria-label') && !htmlInput.hasAttribute('aria-labelledby')) {\n        const placeholder = htmlInput.getAttribute('placeholder')\n        if (placeholder) {\n          htmlInput.setAttribute('aria-label', placeholder)\n        }\n      }\n\n      // Add required indicators\n      if (htmlInput.hasAttribute('required')) {\n        const label = htmlInput.labels?.[0]\n        if (label && !label.querySelector('.required-indicator')) {\n          const indicator = document.createElement('span')\n          indicator.className = 'required-indicator sr-only'\n          indicator.textContent = ' (required)'\n          label.append(indicator)\n        }\n      }\n\n      // Handle invalid states\n      htmlInput.addEventListener('invalid', () => {\n        this.handleFormError(htmlInput)\n      })\n    })\n  }\n\n  private handleFormError(input: HTMLInputElement): void {\n    const errorId = `${input.id || input.name}-error`\n    let errorElement = document.getElementById(errorId)\n    \n    if (!errorElement) {\n      errorElement = document.createElement('div')\n      errorElement.id = errorId\n      errorElement.className = 'invalid-feedback'\n      errorElement.setAttribute('role', 'alert')\n      input.parentNode?.insertBefore(errorElement, input.nextSibling)\n    }\n    \n    errorElement.textContent = input.validationMessage\n    input.setAttribute('aria-describedby', errorId)\n    input.classList.add('is-invalid')\n    \n    this.announce(`Error in ${input.labels?.[0]?.textContent || input.name}: ${input.validationMessage}`, 'assertive')\n  }\n\n  // Modal focus management\n  private initModalFocusManagement(): void {\n    document.addEventListener('shown.bs.modal', (event) => {\n      const modal = event.target as HTMLElement\n      const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')\n      \n      if (focusableElements.length > 0) {\n        (focusableElements[0] as HTMLElement).focus()\n      }\n      \n      // Store previous focus\n      this.focusHistory.push(document.activeElement as HTMLElement)\n    })\n\n    document.addEventListener('hidden.bs.modal', () => {\n      // Restore previous focus\n      const previousElement = this.focusHistory.pop()\n      if (previousElement) {\n        previousElement.focus()\n      }\n    })\n  }\n\n  // Dropdown focus management\n  private initDropdownFocusManagement(): void {\n    document.addEventListener('shown.bs.dropdown', (event) => {\n      const dropdown = event.target as HTMLElement\n      const menu = dropdown.querySelector('.dropdown-menu')\n      const firstItem = menu?.querySelector('a, button') as HTMLElement\n      \n      if (firstItem) {\n        firstItem.focus()\n      }\n    })\n  }\n\n  // Public API methods\n  public announce(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\n    if (!this.liveRegion) {\n      this.createLiveRegion()\n    }\n    \n    if (this.liveRegion) {\n      this.liveRegion.setAttribute('aria-live', priority)\n      this.liveRegion.textContent = message\n      \n      // Clear after announcement\n      setTimeout(() => {\n        if (this.liveRegion) {\n          this.liveRegion.textContent = ''\n        }\n      }, 1000)\n    }\n  }\n\n  public focusElement(selector: string): void {\n    const element = document.querySelector(selector) as HTMLElement\n    if (element) {\n      element.focus()\n      \n      // Ensure element is visible\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' })\n    }\n  }\n\n  public trapFocus(container: HTMLElement): void {\n    const focusableElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    ) as NodeListOf<HTMLElement>\n    \n    const focusableArray = Array.from(focusableElements)\n    const firstElement = focusableArray[0]\n    const lastElement = focusableArray.at(-1)\n    \n    container.addEventListener('keydown', (event) => {\n      if (event.key === 'Tab') {\n        if (event.shiftKey) {\n          if (document.activeElement === firstElement) {\n            lastElement?.focus()\n            event.preventDefault()\n          }\n        } else if (document.activeElement === lastElement) {\n          firstElement.focus()\n          event.preventDefault()\n        }\n      }\n    })\n  }\n\n  public addLandmarks(): void {\n    // Add main landmark if missing\n    const main = document.querySelector('main')\n    if (!main) {\n      const appMain = document.querySelector('.app-main')\n      if (appMain) {\n        appMain.setAttribute('role', 'main')\n        appMain.id = 'main'\n      }\n    }\n\n    // Add navigation landmarks\n    document.querySelectorAll('.navbar-nav, .nav').forEach((nav, index) => {\n      if (!nav.hasAttribute('role')) {\n        nav.setAttribute('role', 'navigation')\n      }\n      if (!nav.hasAttribute('aria-label')) {\n        nav.setAttribute('aria-label', `Navigation ${index + 1}`)\n      }\n    })\n\n    // Add search landmark\n    const searchForm = document.querySelector('form[role=\"search\"], .navbar-search')\n    if (searchForm && !searchForm.hasAttribute('role')) {\n      searchForm.setAttribute('role', 'search')\n    }\n  }\n}\n\n// Initialize accessibility when DOM is ready\nexport const initAccessibility = (config?: Partial<AccessibilityConfig>): AccessibilityManager => {\n  return new AccessibilityManager(config)\n}\n\n// Utility function for luminance calculation\nconst getLuminance = (color: string): number => {\n  const rgb = color.match(/\\d+/g)?.map(Number) || [0, 0, 0]\n  const [r, g, b] = rgb.map(c => {\n    c = c / 255\n    return c <= 0.039_28 ? c / 12.92 : (c + 0.055) ** 2.4 / (1.055 ** 2.4)\n  })\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b\n}\n\n// Export utility functions\nexport const accessibilityUtils = {\n  // WCAG 1.4.3: Contrast checking utility\n  checkColorContrast: (foreground: string, background: string): { ratio: number; passes: boolean } => {\n    const l1 = getLuminance(foreground)\n    const l2 = getLuminance(background)\n    const ratio = (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05)\n    \n    return {\n      ratio: Math.round(ratio * 100) / 100,\n      passes: ratio >= 4.5\n    }\n  },\n\n  // Generate unique IDs for accessibility\n  generateId: (prefix: string = 'a11y'): string => {\n    return `${prefix}-${Math.random().toString(36).slice(2, 11)}`\n  },\n\n  // Check if element is focusable\n  isFocusable: (element: HTMLElement): boolean => {\n    const focusableSelectors = [\n      'a[href]',\n      'button:not([disabled])',\n      'input:not([disabled])',\n      'select:not([disabled])',\n      'textarea:not([disabled])',\n      '[tabindex]:not([tabindex=\"-1\"])',\n      '[contenteditable=\"true\"]'\n    ]\n    \n    return focusableSelectors.some(selector => element.matches(selector))\n  }\n} ", "import { onDOMContentLoaded } from './util/index.js'\nimport Layout from './layout.js'\nimport CardWidget from './card-widget.js'\nimport Treeview from './treeview.js'\nimport DirectChat from './direct-chat.js'\nimport FullScreen from './fullscreen.js'\nimport PushMenu from './push-menu.js'\nimport { initAccessibility } from './accessibility.js'\n\n/**\n * AdminLTE v4.0.0-rc1\n * Author: Colorlib\n * Website: AdminLTE.io <https://adminlte.io>\n * License: Open source - MIT <https://opensource.org/licenses/MIT>\n */\n\nonDOMContentLoaded(() => {\n  /**\n   * Initialize AdminLTE Core Components\n   * -------------------------------\n   */\n  const layout = new Layout(document.body)\n  layout.holdTransition()\n  \n  /**\n   * Initialize Accessibility Features - WCAG 2.1 AA Compliance\n   * --------------------------------------------------------\n   */\n  const accessibilityManager = initAccessibility({\n    announcements: true,\n    skipLinks: true,\n    focusManagement: true,\n    keyboardNavigation: true,\n    reducedMotion: true\n  })\n  \n  // Add semantic landmarks\n  accessibilityManager.addLandmarks()\n  \n  // Mark app as loaded after initialization\n  setTimeout(() => {\n    document.body.classList.add('app-loaded')\n  }, 400)\n})\n\nexport {\n  Layout,\n  CardWidget,\n  Treeview,\n  DirectChat,\n  FullScreen,\n  PushMenu,\n  initAccessibility\n}\n"],
  "mappings": "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",
  "names": ["domContentLoadedCallbacks", "onDOMContentLoaded", "callback", "document", "readyState", "length", "addEventListener", "push", "slideUp", "target", "duration", "style", "transitionProperty", "transitionDuration", "boxSizing", "height", "offsetHeight", "overflow", "globalThis", "setTimeout", "paddingTop", "paddingBottom", "marginTop", "marginBottom", "display", "removeProperty", "slideDown", "getComputedStyle", "CLASS_NAME_HOLD_TRANSITIONS", "Layout", "_element", "element", "this", "holdTransition", "resizeTimer", "window", "body", "classList", "add", "clearTimeout", "remove", "EVENT_KEY", "EVENT_COLLAPSED", "EVENT_EXPANDED", "EVENT_REMOVE", "EVENT_MAXIMIZED", "EVENT_MINIMIZED", "CLASS_NAME_CARD", "CLASS_NAME_COLLAPSED", "CLASS_NAME_COLLAPSING", "CLASS_NAME_EXPANDING", "CLASS_NAME_WAS_COLLAPSED", "CLASS_NAME_MAXIMIZED", "SELECTOR_DATA_REMOVE", "SELECTOR_DATA_COLLAPSE", "SELECTOR_DATA_MAXIMIZE", "SELECTOR_CARD", "SELECTOR_CARD_BODY", "SELECTOR_CARD_FOOTER", "Default", "animationSpeed", "collapseTrigger", "removeTrigger", "maximizeTrigger", "CardWidget", "_parent", "_clone", "_config", "config", "closest", "contains", "collapse", "event", "Event", "elm", "querySelectorAll", "forEach", "el", "HTMLElement", "dispatchEvent", "expand", "toggle", "maximize", "width", "offsetWidth", "transition", "htmlTag", "querySelector", "minimize", "toggleMaximize", "btn", "preventDefault", "CLASS_NAME_MENU_OPEN", "SELECTOR_NAV_ITEM", "SELECTOR_TREEVIEW_MENU", "accordion", "Treeview", "open", "openMenuList", "parentElement", "openMenu", "childElement", "close", "targetItem", "targetLink", "lteToggleElement", "currentTarget", "getAttribute", "accordionAttr", "dataset", "animationSpeedAttr", "Number", "CLASS_NAME_DIRECT_CHAT_OPEN", "DirectChat", "chatPane", "SELECTOR_FULLSCREEN_TOGGLE", "SELECTOR_MAXIMIZE_ICON", "SELECTOR_MINIMIZE_ICON", "FullScreen", "inFullScreen", "iconMaximize", "iconMinimize", "documentElement", "requestFullscreen", "outFullscreen", "exitFullscreen", "toggleFullScreen", "fullscreenEnabled", "fullscreenElement", "button", "undefined", "EVENT_OPEN", "EVENT_COLLAPSE", "CLASS_NAME_SIDEBAR_MINI", "CLASS_NAME_SIDEBAR_COLLAPSE", "CLASS_NAME_SIDEBAR_OPEN", "CLASS_NAME_SIDEBAR_EXPAND", "SELECTOR_SIDEBAR_EXPAND", "SELECTOR_SIDEBAR_TOGGLE", "Defaults", "sidebarBreakpoint", "PushMenu", "menusClose", "navTree", "navSidebar", "navItem", "navI", "addSidebarBreakPoint", "sidebarExpandList", "sidebarExpand", "Array", "from", "find", "className", "startsWith", "sidebar", "getElementsByClassName", "sidebarContent", "getPropertyValue", "replace", "innerWidth", "init", "data", "sidebarOverlay", "createElement", "append", "passive", "lteToggle", "AccessibilityManager", "liveRegion", "focusHistory", "announcements", "skipLinks", "focusManagement", "keyboardNavigation", "reducedMotion", "createLiveRegion", "addSkipLinks", "initFocusManagement", "initKeyboardNavigation", "respectReducedMotion", "initErrorAnnouncements", "initTableAccessibility", "initFormAccessibility", "id", "setAttribute", "skipLinksContainer", "skipToMain", "href", "textContent", "skipToNav", "insertBefore", "firstChild", "ensureSkipTargets", "main", "hasAttribute", "nav", "key", "handleTabNavigation", "handleEscapeKey", "initModalFocusManagement", "initDropdownFocusManagement", "focusableElements", "getFocusableElements", "currentIndex", "indexOf", "activeElement", "shiftKey", "at", "focus", "selector", "join", "activeModal", "activeDropdown", "closeButton", "click", "toggleButton", "handleMenuNavigation", "matches", "includes", "currentElement", "menuItems", "nextIndex", "matchMedia", "scrollBehavior", "head", "MutationObserver", "mutations", "mutation", "addedNodes", "node", "nodeType", "Node", "ELEMENT_NODE", "announce", "observe", "childList", "subtree", "table", "th", "isInThead", "isFirstColumn", "cellIndex", "caption", "input", "htmlInput", "labels", "placeholder", "label", "indicator", "handleFormError", "errorId", "name", "errorElement", "getElementById", "parentNode", "nextSibling", "validationMessage", "previousElement", "pop", "menu", "firstItem", "message", "priority", "scrollIntoView", "behavior", "block", "container", "focusableArray", "firstElement", "lastElement", "addLandmarks", "appMain", "index", "searchForm", "initAccessibility"]
}
