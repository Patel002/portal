import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/admin-lte/dist/js/adminlte.min.js
var require_adminlte_min = __commonJS({
  "node_modules/admin-lte/dist/js/adminlte.min.js"(exports, module) {
    !(function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).adminlte = {});
    })(exports, function(e) {
      "use strict";
      const t = [], n = (e2) => {
        "loading" === document.readyState ? (t.length || document.addEventListener("DOMContentLoaded", () => {
          for (const e3 of t) e3();
        }), t.push(e2)) : e2();
      }, i = (e2, t2 = 500) => {
        e2.style.transitionProperty = "height, margin, padding", e2.style.transitionDuration = `${t2}ms`, e2.style.boxSizing = "border-box", e2.style.height = `${e2.offsetHeight}px`, e2.style.overflow = "hidden", globalThis.setTimeout(() => {
          e2.style.height = "0", e2.style.paddingTop = "0", e2.style.paddingBottom = "0", e2.style.marginTop = "0", e2.style.marginBottom = "0";
        }, 1), globalThis.setTimeout(() => {
          e2.style.display = "none", e2.style.removeProperty("height"), e2.style.removeProperty("padding-top"), e2.style.removeProperty("padding-bottom"), e2.style.removeProperty("margin-top"), e2.style.removeProperty("margin-bottom"), e2.style.removeProperty("overflow"), e2.style.removeProperty("transition-duration"), e2.style.removeProperty("transition-property");
        }, t2);
      }, o = (e2, t2 = 500) => {
        e2.style.removeProperty("display");
        let { display: n2 } = globalThis.getComputedStyle(e2);
        "none" === n2 && (n2 = "block"), e2.style.display = n2;
        const i2 = e2.offsetHeight;
        e2.style.overflow = "hidden", e2.style.height = "0", e2.style.paddingTop = "0", e2.style.paddingBottom = "0", e2.style.marginTop = "0", e2.style.marginBottom = "0", globalThis.setTimeout(() => {
          e2.style.boxSizing = "border-box", e2.style.transitionProperty = "height, margin, padding", e2.style.transitionDuration = `${t2}ms`, e2.style.height = `${i2}px`, e2.style.removeProperty("padding-top"), e2.style.removeProperty("padding-bottom"), e2.style.removeProperty("margin-top"), e2.style.removeProperty("margin-bottom");
        }, 1), globalThis.setTimeout(() => {
          e2.style.removeProperty("height"), e2.style.removeProperty("overflow"), e2.style.removeProperty("transition-duration"), e2.style.removeProperty("transition-property");
        }, t2);
      }, s = "hold-transition";
      class a {
        _element;
        constructor(e2) {
          this._element = e2;
        }
        holdTransition() {
          let e2;
          window.addEventListener("resize", () => {
            document.body.classList.add(s), clearTimeout(e2), e2 = setTimeout(() => {
              document.body.classList.remove(s);
            }, 400);
          });
        }
      }
      n(() => {
        new a(document.body).holdTransition(), setTimeout(() => {
          document.body.classList.add("app-loaded");
        }, 400);
      });
      const r = ".lte.card-widget", l = `collapsed${r}`, c = `expanded${r}`, d = `remove${r}`, m = `maximized${r}`, u = `minimized${r}`, h = "card", p = "collapsed-card", g = "collapsing-card", y = "expanding-card", v = "was-collapsed", b = "maximized-card", f = '[data-lte-toggle="card-remove"]', E = '[data-lte-toggle="card-collapse"]', _ = '[data-lte-toggle="card-maximize"]', S = `.${h}`, L = ".card-body", w = ".card-footer", A = { animationSpeed: 500, collapseTrigger: E, removeTrigger: f, maximizeTrigger: _ };
      class k {
        _element;
        _parent;
        _clone;
        _config;
        constructor(e2, t2) {
          this._element = e2, this._parent = e2.closest(S), e2.classList.contains(h) && (this._parent = e2), this._config = { ...A, ...t2 };
        }
        collapse() {
          const e2 = new Event(l);
          if (this._parent) {
            this._parent.classList.add(g);
            const e3 = this._parent?.querySelectorAll(`${L}, ${w}`);
            e3.forEach((e4) => {
              e4 instanceof HTMLElement && i(e4, this._config.animationSpeed);
            }), setTimeout(() => {
              this._parent && (this._parent.classList.add(p), this._parent.classList.remove(g));
            }, this._config.animationSpeed);
          }
          this._element?.dispatchEvent(e2);
        }
        expand() {
          const e2 = new Event(c);
          if (this._parent) {
            this._parent.classList.add(y);
            const e3 = this._parent?.querySelectorAll(`${L}, ${w}`);
            e3.forEach((e4) => {
              e4 instanceof HTMLElement && o(e4, this._config.animationSpeed);
            }), setTimeout(() => {
              this._parent && this._parent.classList.remove(p, y);
            }, this._config.animationSpeed);
          }
          this._element?.dispatchEvent(e2);
        }
        remove() {
          const e2 = new Event(d);
          this._parent && i(this._parent, this._config.animationSpeed), this._element?.dispatchEvent(e2);
        }
        toggle() {
          this._parent?.classList.contains(p) ? this.expand() : this.collapse();
        }
        maximize() {
          const e2 = new Event(m);
          this._parent && (this._parent.style.height = `${this._parent.offsetHeight}px`, this._parent.style.width = `${this._parent.offsetWidth}px`, this._parent.style.transition = "all .15s", setTimeout(() => {
            const e3 = document.querySelector("html");
            e3 && e3.classList.add(b), this._parent && (this._parent.classList.add(b), this._parent.classList.contains(p) && this._parent.classList.add(v));
          }, 150)), this._element?.dispatchEvent(e2);
        }
        minimize() {
          const e2 = new Event(u);
          this._parent && (this._parent.style.height = "auto", this._parent.style.width = "auto", this._parent.style.transition = "all .15s", setTimeout(() => {
            const e3 = document.querySelector("html");
            e3 && e3.classList.remove(b), this._parent && (this._parent.classList.remove(b), this._parent?.classList.contains(v) && this._parent.classList.remove(v));
          }, 10)), this._element?.dispatchEvent(e2);
        }
        toggleMaximize() {
          this._parent?.classList.contains(b) ? this.minimize() : this.maximize();
        }
      }
      n(() => {
        document.querySelectorAll(E).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target;
            new k(t2, A).toggle();
          });
        }), document.querySelectorAll(f).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target;
            new k(t2, A).remove();
          });
        }), document.querySelectorAll(_).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target;
            new k(t2, A).toggleMaximize();
          });
        });
      });
      const x = ".lte.treeview", q = `expanded${x}`, T = `collapsed${x}`, $ = "menu-open", M = ".nav-item", D = ".nav-treeview", N = { animationSpeed: 300, accordion: true };
      class P {
        _element;
        _config;
        constructor(e2, t2) {
          this._element = e2, this._config = { ...N, ...t2 };
        }
        open() {
          const e2 = new Event(q);
          if (this._config.accordion) {
            const e3 = this._element.parentElement?.querySelectorAll(`${M}.${$}`);
            e3?.forEach((e4) => {
              if (e4 !== this._element.parentElement) {
                e4.classList.remove($);
                const t3 = e4?.querySelector(D);
                t3 && i(t3, this._config.animationSpeed);
              }
            });
          }
          this._element.classList.add($);
          const t2 = this._element?.querySelector(D);
          t2 && o(t2, this._config.animationSpeed), this._element.dispatchEvent(e2);
        }
        close() {
          const e2 = new Event(T);
          this._element.classList.remove($);
          const t2 = this._element?.querySelector(D);
          t2 && i(t2, this._config.animationSpeed), this._element.dispatchEvent(e2);
        }
        toggle() {
          this._element.classList.contains($) ? this.close() : this.open();
        }
      }
      n(() => {
        document.querySelectorAll('[data-lte-toggle="treeview"]').forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            const t2 = e3.target, n2 = t2.closest(M), i2 = t2.closest(".nav-link"), o2 = e3.currentTarget;
            if ("#" !== t2?.getAttribute("href") && "#" !== i2?.getAttribute("href") || e3.preventDefault(), n2) {
              const e4 = o2.dataset.accordion, t3 = o2.dataset.animationSpeed, i3 = { accordion: void 0 === e4 ? N.accordion : "true" === e4, animationSpeed: void 0 === t3 ? N.animationSpeed : Number(t3) };
              new P(n2, i3).toggle();
            }
          });
        });
      });
      const F = ".lte.direct-chat", R = `expanded${F}`, C = `collapsed${F}`, z = "direct-chat-contacts-open";
      class B {
        _element;
        constructor(e2) {
          this._element = e2;
        }
        toggle() {
          if (this._element.classList.contains(z)) {
            const e2 = new Event(C);
            this._element.classList.remove(z), this._element.dispatchEvent(e2);
          } else {
            const e2 = new Event(R);
            this._element.classList.add(z), this._element.dispatchEvent(e2);
          }
        }
      }
      n(() => {
        document.querySelectorAll('[data-lte-toggle="chat-pane"]').forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target.closest(".direct-chat");
            t2 && new B(t2).toggle();
          });
        });
      });
      const H = ".lte.fullscreen", K = `maximized${H}`, O = `minimized${H}`, W = '[data-lte-toggle="fullscreen"]', I = '[data-lte-icon="maximize"]', j = '[data-lte-icon="minimize"]';
      class U {
        _element;
        _config;
        constructor(e2, t2) {
          this._element = e2, this._config = t2;
        }
        inFullScreen() {
          const e2 = new Event(K), t2 = document.querySelector(I), n2 = document.querySelector(j);
          document.documentElement.requestFullscreen(), t2 && (t2.style.display = "none"), n2 && (n2.style.display = "block"), this._element.dispatchEvent(e2);
        }
        outFullscreen() {
          const e2 = new Event(O), t2 = document.querySelector(I), n2 = document.querySelector(j);
          document.exitFullscreen(), t2 && (t2.style.display = "block"), n2 && (n2.style.display = "none"), this._element.dispatchEvent(e2);
        }
        toggleFullScreen() {
          document.fullscreenEnabled && (document.fullscreenElement ? this.outFullscreen() : this.inFullScreen());
        }
      }
      n(() => {
        document.querySelectorAll(W).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target.closest(W);
            t2 && new U(t2, void 0).toggleFullScreen();
          });
        });
      });
      const V = ".lte.push-menu", G = `open${V}`, J = `collapse${V}`, Q = "sidebar-mini", X = "sidebar-collapse", Y = "sidebar-open", Z = "sidebar-expand", ee = `[class*="${Z}"]`, te = '[data-lte-toggle="sidebar"]', ne = { sidebarBreakpoint: 992 };
      class ie {
        _element;
        _config;
        constructor(e2, t2) {
          this._element = e2, this._config = { ...ne, ...t2 };
        }
        menusClose() {
          document.querySelectorAll(".nav-treeview").forEach((e3) => {
            e3.style.removeProperty("display"), e3.style.removeProperty("height");
          });
          const e2 = document.querySelector(".sidebar-menu"), t2 = e2?.querySelectorAll(".nav-item");
          t2 && t2.forEach((e3) => {
            e3.classList.remove("menu-open");
          });
        }
        expand() {
          const e2 = new Event(G);
          document.body.classList.remove(X), document.body.classList.add(Y), this._element.dispatchEvent(e2);
        }
        collapse() {
          const e2 = new Event(J);
          document.body.classList.remove(Y), document.body.classList.add(X), this._element.dispatchEvent(e2);
        }
        addSidebarBreakPoint() {
          const e2 = document.querySelector(ee)?.classList ?? [], t2 = Array.from(e2).find((e3) => e3.startsWith(Z)) ?? "", n2 = document.getElementsByClassName(t2)[0], i2 = globalThis.getComputedStyle(n2, "::before").getPropertyValue("content");
          this._config = { ...this._config, sidebarBreakpoint: Number(i2.replace(/[^\d.-]/g, "")) }, window.innerWidth <= this._config.sidebarBreakpoint ? this.collapse() : (document.body.classList.contains(Q) || this.expand(), document.body.classList.contains(Q) && document.body.classList.contains(X) && this.collapse());
        }
        toggle() {
          document.body.classList.contains(X) ? this.expand() : this.collapse();
        }
        init() {
          this.addSidebarBreakPoint();
        }
      }
      n(() => {
        const e2 = document?.querySelector(".app-sidebar");
        if (e2) {
          const t3 = new ie(e2, ne);
          t3.init(), window.addEventListener("resize", () => {
            t3.init();
          });
        }
        const t2 = document.createElement("div");
        t2.className = "sidebar-overlay", document.querySelector(".app-wrapper")?.append(t2), t2.addEventListener("touchstart", (e3) => {
          e3.preventDefault();
          const t3 = e3.currentTarget;
          new ie(t3, ne).collapse();
        }, { passive: true }), t2.addEventListener("click", (e3) => {
          e3.preventDefault();
          const t3 = e3.currentTarget;
          new ie(t3, ne).collapse();
        }), document.querySelectorAll(te).forEach((e3) => {
          e3.addEventListener("click", (e4) => {
            e4.preventDefault();
            let t3 = e4.currentTarget;
            "sidebar" !== t3?.dataset.lteToggle && (t3 = t3?.closest(te)), t3 && (e4?.preventDefault(), new ie(t3, ne).toggle());
          });
        });
      });
      class oe {
        config;
        liveRegion = null;
        focusHistory = [];
        constructor(e2 = {}) {
          this.config = { announcements: true, skipLinks: true, focusManagement: true, keyboardNavigation: true, reducedMotion: true, ...e2 }, this.init();
        }
        init() {
          this.config.announcements && this.createLiveRegion(), this.config.skipLinks && this.addSkipLinks(), this.config.focusManagement && this.initFocusManagement(), this.config.keyboardNavigation && this.initKeyboardNavigation(), this.config.reducedMotion && this.respectReducedMotion(), this.initErrorAnnouncements(), this.initTableAccessibility(), this.initFormAccessibility();
        }
        createLiveRegion() {
          this.liveRegion || (this.liveRegion = document.createElement("div"), this.liveRegion.id = "live-region", this.liveRegion.className = "live-region", this.liveRegion.setAttribute("aria-live", "polite"), this.liveRegion.setAttribute("aria-atomic", "true"), this.liveRegion.setAttribute("role", "status"), document.body.append(this.liveRegion));
        }
        addSkipLinks() {
          const e2 = document.createElement("div");
          e2.className = "skip-links";
          const t2 = document.createElement("a");
          t2.href = "#main", t2.className = "skip-link", t2.textContent = "Skip to main content";
          const n2 = document.createElement("a");
          n2.href = "#navigation", n2.className = "skip-link", n2.textContent = "Skip to navigation", e2.append(t2), e2.append(n2), document.body.insertBefore(e2, document.body.firstChild), this.ensureSkipTargets();
        }
        ensureSkipTargets() {
          const e2 = document.querySelector('#main, main, [role="main"]');
          e2 && !e2.id && (e2.id = "main"), e2 && !e2.hasAttribute("tabindex") && e2.setAttribute("tabindex", "-1");
          const t2 = document.querySelector('#navigation, nav, [role="navigation"]');
          t2 && !t2.id && (t2.id = "navigation"), t2 && !t2.hasAttribute("tabindex") && t2.setAttribute("tabindex", "-1");
        }
        initFocusManagement() {
          document.addEventListener("keydown", (e2) => {
            "Tab" === e2.key && this.handleTabNavigation(e2), "Escape" === e2.key && this.handleEscapeKey(e2);
          }), this.initModalFocusManagement(), this.initDropdownFocusManagement();
        }
        handleTabNavigation(e2) {
          const t2 = this.getFocusableElements(), n2 = t2.indexOf(document.activeElement);
          e2.shiftKey ? n2 <= 0 && (e2.preventDefault(), t2.at(-1)?.focus()) : n2 >= t2.length - 1 && (e2.preventDefault(), t2[0]?.focus());
        }
        getFocusableElements() {
          const e2 = ["a[href]", "button:not([disabled])", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", '[tabindex]:not([tabindex="-1"])', '[contenteditable="true"]'].join(", ");
          return Array.from(document.querySelectorAll(e2));
        }
        handleEscapeKey(e2) {
          const t2 = document.querySelector(".modal.show"), n2 = document.querySelector(".dropdown-menu.show");
          if (t2) {
            const n3 = t2.querySelector('[data-bs-dismiss="modal"]');
            n3?.click(), e2.preventDefault();
          } else if (n2) {
            const t3 = document.querySelector('[data-bs-toggle="dropdown"][aria-expanded="true"]');
            t3?.click(), e2.preventDefault();
          }
        }
        initKeyboardNavigation() {
          document.addEventListener("keydown", (e2) => {
            const t2 = e2.target;
            t2.closest(".nav, .navbar-nav, .dropdown-menu") && this.handleMenuNavigation(e2), "Enter" !== e2.key && " " !== e2.key || !t2.hasAttribute("role") || "button" !== t2.getAttribute("role") || t2.matches('button, input[type="button"], input[type="submit"]') || (e2.preventDefault(), t2.click());
          });
        }
        handleMenuNavigation(e2) {
          if (!["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Home", "End"].includes(e2.key)) return;
          const t2 = e2.target, n2 = Array.from(t2.closest(".nav, .navbar-nav, .dropdown-menu")?.querySelectorAll("a, button") || []), i2 = n2.indexOf(t2);
          let o2;
          switch (e2.key) {
            case "ArrowDown":
            case "ArrowRight":
              o2 = i2 < n2.length - 1 ? i2 + 1 : 0;
              break;
            case "ArrowUp":
            case "ArrowLeft":
              o2 = i2 > 0 ? i2 - 1 : n2.length - 1;
              break;
            case "Home":
              o2 = 0;
              break;
            case "End":
              o2 = n2.length - 1;
              break;
            default:
              return;
          }
          e2.preventDefault(), n2[o2]?.focus();
        }
        respectReducedMotion() {
          if (globalThis.matchMedia("(prefers-reduced-motion: reduce)").matches) {
            document.body.classList.add("reduce-motion"), document.documentElement.style.scrollBehavior = "auto";
            const e2 = document.createElement("style");
            e2.textContent = "\n        *, *::before, *::after {\n          animation-duration: 0.01ms !important;\n          animation-iteration-count: 1 !important;\n          transition-duration: 0.01ms !important;\n        }\n      ", document.head.append(e2);
          }
        }
        initErrorAnnouncements() {
          new MutationObserver((e2) => {
            e2.forEach((e3) => {
              e3.addedNodes.forEach((e4) => {
                if (e4.nodeType === Node.ELEMENT_NODE) {
                  const t2 = e4;
                  t2.matches(".alert-danger, .invalid-feedback, .error") && this.announce(t2.textContent || "Error occurred", "assertive"), t2.matches(".alert-success, .success") && this.announce(t2.textContent || "Success", "polite");
                }
              });
            });
          }).observe(document.body, { childList: true, subtree: true });
        }
        initTableAccessibility() {
          document.querySelectorAll("table").forEach((e2) => {
            if (e2.hasAttribute("role") || e2.setAttribute("role", "table"), e2.querySelectorAll("th").forEach((e3) => {
              if (!e3.hasAttribute("scope")) {
                const t2 = e3.closest("thead"), n2 = 0 === e3.cellIndex;
                t2 ? e3.setAttribute("scope", "col") : n2 && e3.setAttribute("scope", "row");
              }
            }), !e2.querySelector("caption") && e2.hasAttribute("title")) {
              const t2 = document.createElement("caption");
              t2.textContent = e2.getAttribute("title") || "", e2.insertBefore(t2, e2.firstChild);
            }
          });
        }
        initFormAccessibility() {
          document.querySelectorAll("input, select, textarea").forEach((e2) => {
            const t2 = e2;
            if (!t2.labels?.length && !t2.hasAttribute("aria-label") && !t2.hasAttribute("aria-labelledby")) {
              const e3 = t2.getAttribute("placeholder");
              e3 && t2.setAttribute("aria-label", e3);
            }
            if (t2.hasAttribute("required")) {
              const e3 = t2.labels?.[0];
              if (e3 && !e3.querySelector(".required-indicator")) {
                const t3 = document.createElement("span");
                t3.className = "required-indicator sr-only", t3.textContent = " (required)", e3.append(t3);
              }
            }
            t2.addEventListener("invalid", () => {
              this.handleFormError(t2);
            });
          });
        }
        handleFormError(e2) {
          const t2 = `${e2.id || e2.name}-error`;
          let n2 = document.getElementById(t2);
          n2 || (n2 = document.createElement("div"), n2.id = t2, n2.className = "invalid-feedback", n2.setAttribute("role", "alert"), e2.parentNode?.insertBefore(n2, e2.nextSibling)), n2.textContent = e2.validationMessage, e2.setAttribute("aria-describedby", t2), e2.classList.add("is-invalid"), this.announce(`Error in ${e2.labels?.[0]?.textContent || e2.name}: ${e2.validationMessage}`, "assertive");
        }
        initModalFocusManagement() {
          document.addEventListener("shown.bs.modal", (e2) => {
            const t2 = e2.target.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            t2.length > 0 && t2[0].focus(), this.focusHistory.push(document.activeElement);
          }), document.addEventListener("hidden.bs.modal", () => {
            const e2 = this.focusHistory.pop();
            e2 && e2.focus();
          });
        }
        initDropdownFocusManagement() {
          document.addEventListener("shown.bs.dropdown", (e2) => {
            const t2 = e2.target.querySelector(".dropdown-menu"), n2 = t2?.querySelector("a, button");
            n2 && n2.focus();
          });
        }
        announce(e2, t2 = "polite") {
          this.liveRegion || this.createLiveRegion(), this.liveRegion && (this.liveRegion.setAttribute("aria-live", t2), this.liveRegion.textContent = e2, setTimeout(() => {
            this.liveRegion && (this.liveRegion.textContent = "");
          }, 1e3));
        }
        focusElement(e2) {
          const t2 = document.querySelector(e2);
          t2 && (t2.focus(), t2.scrollIntoView({ behavior: "smooth", block: "center" }));
        }
        trapFocus(e2) {
          const t2 = e2.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'), n2 = Array.from(t2), i2 = n2[0], o2 = n2.at(-1);
          e2.addEventListener("keydown", (e3) => {
            "Tab" === e3.key && (e3.shiftKey ? document.activeElement === i2 && (o2?.focus(), e3.preventDefault()) : document.activeElement === o2 && (i2.focus(), e3.preventDefault()));
          });
        }
        addLandmarks() {
          if (!document.querySelector("main")) {
            const e3 = document.querySelector(".app-main");
            e3 && (e3.setAttribute("role", "main"), e3.id = "main");
          }
          document.querySelectorAll(".navbar-nav, .nav").forEach((e3, t2) => {
            e3.hasAttribute("role") || e3.setAttribute("role", "navigation"), e3.hasAttribute("aria-label") || e3.setAttribute("aria-label", `Navigation ${t2 + 1}`);
          });
          const e2 = document.querySelector('form[role="search"], .navbar-search');
          e2 && !e2.hasAttribute("role") && e2.setAttribute("role", "search");
        }
      }
      const se = (e2) => new oe(e2);
      n(() => {
        new a(document.body).holdTransition(), se({ announcements: true, skipLinks: true, focusManagement: true, keyboardNavigation: true, reducedMotion: true }).addLandmarks(), setTimeout(() => {
          document.body.classList.add("app-loaded");
        }, 400);
      }), e.CardWidget = k, e.DirectChat = B, e.FullScreen = U, e.Layout = a, e.PushMenu = ie, e.Treeview = P, e.initAccessibility = se;
    });
  }
});
export default require_adminlte_min();
/*! Bundled license information:

admin-lte/dist/js/adminlte.min.js:
  (*!
   * AdminLTE v4.0.0-rc3 (https://adminlte.io)
   * Copyright 2014-2025 Colorlib <https://colorlib.com>
   * Licensed under MIT (https://github.com/ColorlibHQ/AdminLTE/blob/master/LICENSE)
   *)
*/
//# sourceMappingURL=admin-lte.js.map
